class MayakFinder {
    constructor() {
        this.latitude = null;
        this.longitude = null;
        this.device = null;
        this.server = null;
        this.isConnected = false;
        this.coordinatesCount = 0;
        this.map = null;
        this.userMarker = null;
        
        this.init();
    }

    init() {
        this.bindEvents();
        this.initMiniMap();
        this.updateCoordinatesCount();
        this.startUserLocationTracking();
    }

    bindEvents() {
        document.getElementById('connectBtn').addEventListener('click', () => this.connectBluetooth());
        document.getElementById('copyBtn').addEventListener('click', () => this.copyCoordinates());
        document.getElementById('openMapBtn').addEventListener('click', () => this.openMap());
        document.getElementById('openExternalMapsBtn').addEventListener('click', () => this.openExternalMaps());
        document.getElementById('testBtn').addEventListener('click', () => this.useTestData());
        document.getElementById('lightOnBtn').addEventListener('click', () => this.controlLight(true));
        document.getElementById('lightOffBtn').addEventListener('click', () => this.controlLight(false));
        document.getElementById('settingsBtn').addEventListener('click', () => this.showSettings());
        document.getElementById('historyBtn').addEventListener('click', () => this.showHistory());

        document.querySelectorAll('.close-modal').forEach(btn => {
            btn.addEventListener('click', (e) => this.closeModal(e.target.closest('.modal')));
        });

        document.querySelectorAll('.modal').forEach(modal => {
            modal.addEventListener('click', (e) => {
                if (e.target === modal) this.closeModal(modal);
            });
        });
    }

    initMiniMap() {
        const mapContainer = document.getElementById('mapPreview');
        if (!mapContainer || !L) return;

        try {
            this.map = L.map('mapPreview').setView([55.241867, 72.908588], 3);
            
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '¬© OpenStreetMap',
                maxZoom: 18
            }).addTo(this.map);

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä –º–∞—è–∫–∞
            L.marker([55.241867, 72.908588])
                .addTo(this.map)
                .bindPopup('üìç –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–∞—è–∫–∞')
                .openPopup();

        } catch (error) {
            console.log('–ú–∏–Ω–∏-–∫–∞—Ä—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞:', error);
        }
    }

    startUserLocationTracking() {
        if (!navigator.geolocation) {
            this.log('‚ùå –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
            return;
        }

        navigator.geolocation.watchPosition(
            (position) => {
                const lat = position.coords.latitude;
                const lon = position.coords.longitude;
                const accuracy = position.coords.accuracy;
                
                this.updateUserPositionOnMiniMap(lat, lon, accuracy);
            },
            (error) => {
                this.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ' + error.message);
            },
            {
                enableHighAccuracy: true,
                timeout: 10000,
                maximumAge: 30000
            }
        );
    }

    updateUserPositionOnMiniMap(lat, lon, accuracy) {
        if (!this.map) return;

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –º–∞—Ä–∫–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (this.userMarker) {
            this.map.removeLayer(this.userMarker);
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.userMarker = L.marker([lat, lon], {
            icon: L.divIcon({
                html: 'üß≠',
                iconSize: [25, 25],
                className: 'user-marker'
            })
        }).addTo(this.map).bindPopup(`
            <strong>üìç –í–∞—à–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ</strong><br>
            –¢–æ—á–Ω–æ—Å—Ç—å: ${Math.round(accuracy)}–º<br>
            –®: ${lat.toFixed(6)}<br>
            –î: ${lon.toFixed(6)}
        `);

        // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–∞—è–∫–∞, —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –º–µ–∂–¥—É –Ω–∏–º–∏
        if (this.latitude && this.longitude) {
            const group = new L.featureGroup([this.userMarker, this.map.getLayers().find(layer => layer instanceof L.Marker && layer !== this.userMarker)]);
            this.map.fitBounds(group.getBounds().pad(0.1));
        } else {
            // –ò–Ω–∞—á–µ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            this.map.setView([lat, lon], 13);
        }
    }

    async connectBluetooth() {
        try {
            this.log('üîµ –ü–æ–∏—Å–∫ Bluetooth —É—Å—Ç—Ä–æ–π—Å—Ç–≤...');
            
            if (!navigator.bluetooth) {
                throw new Error('Bluetooth –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º');
            }

            this.device = await navigator.bluetooth.requestDevice({
                filters: [{ namePrefix: 'Mayak' }],
                optionalServices: ['battery_service', 'device_information']
            });

            this.log('üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–æ: ' + this.device.name);
            
            this.device.addEventListener('gattserverdisconnected', () => {
                this.onDisconnected();
            });

            const server = await this.device.gatt.connect();
            this.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ GATT —Å–µ—Ä–≤–µ—Ä—É');

            await this.setupBluetoothServices(server);
            
            this.isConnected = true;
            this.updateConnectionStatus(true);

        } catch (error) {
            this.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ' + error.message);
            this.updateConnectionStatus(false);
        }
    }

    async setupBluetoothServices(server) {
        try {
            this.log('üì° –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –º–∞—è–∫–∞...');
            
            // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            setInterval(() => {
                if (this.isConnected) {
                    const testLat = 55.241867 + (Math.random() - 0.5) * 0.001;
                    const testLon = 72.908588 + (Math.random() - 0.5) * 0.001;
                    this.handleReceivedData(testLat, testLon);
                }
            }, 5000);

        } catch (error) {
            this.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã: ' + error.message);
        }
    }

    handleReceivedData(lat, lon) {
        this.updateCoordinates(lat, lon);
        this.coordinatesCount++;
        this.updateCoordinatesCount();
        
        if (window.coordinatesHistory) {
            window.coordinatesHistory.addEntry(lat, lon, Date.now(), '–ú–∞—è–∫');
        }
    }

    updateCoordinates(lat, lon) {
        this.latitude = lat;
        this.longitude = lon;
        
        const coordsText = `–®: ${lat.toFixed(6)}, –î: ${lon.toFixed(6)}`;
        document.getElementById('coordinatesText').textContent = coordsText;
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        document.getElementById('copyBtn').disabled = false;
        document.getElementById('openMapBtn').disabled = false;
        document.getElementById('openExternalMapsBtn').disabled = false;
        document.getElementById('lightOnBtn').disabled = false;
        document.getElementById('lightOffBtn').disabled = false;
        
        this.log('üìç –ù–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ' + coordsText);
        this.updateMiniMap(lat, lon);
    }

    updateMiniMap(lat, lon) {
        if (!this.map) return;

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã –º–∞—è–∫–∞ (–∫—Ä–æ–º–µ –º–∞—Ä–∫–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        this.map.eachLayer(layer => {
            if (layer instanceof L.Marker && layer !== this.userMarker) {
                this.map.removeLayer(layer);
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä –º–∞—è–∫–∞
        L.marker([lat, lon], {
            icon: L.divIcon({
                html: 'üéØ',
                iconSize: [30, 30],
                className: 'target-marker'
            })
        }).addTo(this.map).bindPopup(`üéØ –ú–∞—è–∫<br>–®: ${lat.toFixed(6)}<br>–î: ${lon.toFixed(6)}`);

        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –º–µ–∂–¥—É –º–∞—è–∫–æ–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        if (this.userMarker) {
            const targetMarker = this.map.getLayers().find(layer => layer instanceof L.Marker && layer !== this.userMarker);
            if (targetMarker) {
                const group = new L.featureGroup([this.userMarker, targetMarker]);
                this.map.fitBounds(group.getBounds().pad(0.1));
            }
        } else {
            this.map.setView([lat, lon], 15);
        }
    }

    openMap() {
        if (this.latitude && this.longitude) {
            const mapUrl = `map.html?lat=${this.latitude}&lon=${this.longitude}`;
            
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
            const newWindow = window.open(mapUrl, 'MapWindow', 'width=800,height=600,scrollbars=yes,resizable=yes');
            
            if (newWindow) {
                this.log('üó∫Ô∏è –ö–∞—Ä—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ');
                // –§–æ–∫—É—Å –Ω–∞ –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
                setTimeout(() => {
                    if (newWindow && !newWindow.closed) {
                        newWindow.focus();
                    }
                }, 100);
            } else {
                // –ï—Å–ª–∏ popup –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                this.log('‚ùå –ë—Ä–∞—É–∑–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –æ—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞. –†–∞–∑—Ä–µ—à–∏—Ç–µ popup –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–û—Ç–∫—Ä—ã—Ç—å –≤ –∫–∞—Ä—Ç–∞—Ö"');
                alert('–ë—Ä–∞—É–∑–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞:\n1. –†–∞–∑—Ä–µ—à–∏—Ç–µ popup –¥–ª—è —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞\n2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –≤ –∫–∞—Ä—Ç–∞—Ö"\n3. –ò–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—Ä—É—á–Ω—É—é: ' + mapUrl);
            }
        } else {
            this.log('‚ùå –ù–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ');
            alert('–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–∞—è–∫–∞');
        }
    }

    openExternalMaps() {
        if (this.latitude && this.longitude) {
            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–æ –≤–Ω–µ—à–Ω–∏—Ö –∫–∞—Ä—Ç–∞—Ö
            const urls = [
                // Google Maps
                `https://www.google.com/maps/search/?api=1&query=${this.latitude},${this.longitude}`,
                // –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã
                `https://yandex.ru/maps/?text=${this.latitude},${this.longitude}`,
                // OpenStreetMap
                `https://www.openstreetmap.org/?mlat=${this.latitude}&mlon=${this.longitude}#map=15/${this.latitude}/${this.longitude}`,
                // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è geo —Å—Å—ã–ª–∫–∞
                `geo:${this.latitude},${this.longitude}`
            ];

            // –ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ geo —Å—Å—ã–ª–∫—É
            const geoUrl = `geo:${this.latitude},${this.longitude}?q=${this.latitude},${this.longitude}(–ú–∞—è–∫)`;
            window.location.href = geoUrl;
            
            // –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                if (!document.hidden) {
                    // –ï—Å–ª–∏ geo —Å—Å—ã–ª–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤–µ–±-–≤–µ—Ä—Å–∏—é
                    const webUrl = urls[0]; // Google Maps –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    window.open(webUrl, '_blank');
                    this.log('üó∫Ô∏è –û—Ç–∫—Ä—ã–≤–∞—é –≤–æ –≤–Ω–µ—à–Ω–∏—Ö –∫–∞—Ä—Ç–∞—Ö: ' + webUrl);
                }
            }, 2000);

            this.log('üìç –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–æ –≤–Ω–µ—à–Ω–∏–µ –∫–∞—Ä—Ç—ã');
        } else {
            this.log('‚ùå –ù–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞—Ä—Ç—ã');
            alert('–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–∞—è–∫–∞');
        }
    }

    async controlLight(on) {
        if (!this.device || !this.isConnected) return;
        
        try {
            this.log(on ? 'üí° –í–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–µ—Ç–∞...' : 'üîå –í—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–µ—Ç–∞...');
            await new Promise(resolve => setTimeout(resolve, 1000));
            this.log(on ? '‚úÖ –°–≤–µ—Ç –≤–∫–ª—é—á–µ–Ω' : '‚úÖ –°–≤–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω');
        } catch (error) {
            this.log('‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–µ—Ç–æ–º: ' + error.message);
        }
    }

    copyCoordinates() {
        if (this.latitude && this.longitude) {
            const text = `${this.latitude.toFixed(6)}, ${this.longitude.toFixed(6)}`;
            navigator.clipboard.writeText(text).then(() => {
                this.log('‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã');
                
                const btn = document.getElementById('copyBtn');
                const originalText = btn.textContent;
                btn.textContent = '‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
                setTimeout(() => btn.textContent = originalText, 2000);
            });
        }
    }

    useTestData() {
        const testLat = 55.241867 + (Math.random() - 0.5) * 0.01;
        const testLon = 72.908588 + (Math.random() - 0.5) * 0.01;
        
        this.updateCoordinates(testLat, testLon);
        this.log('üß™ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
    }

    updateCoordinatesCount() {
        document.getElementById('coordinatesCount').textContent = this.coordinatesCount;
    }

    onDisconnected() {
        this.isConnected = false;
        this.updateConnectionStatus(false);
        this.log('üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
    }

    updateConnectionStatus(connected) {
        const status = document.getElementById('status');
        status.textContent = connected ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : '‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ';
        status.className = `status ${connected ? 'online' : 'offline'}`;
    }

    log(message) {
        const logElement = document.getElementById('dataLog');
        const timestamp = new Date().toLocaleTimeString();
        const entry = document.createElement('div');
        entry.textContent = `[${timestamp}] ${message}`;
        logElement.prepend(entry);
        
        while (logElement.children.length > 10) {
            logElement.removeChild(logElement.lastChild);
        }
    }

    showSettings() {
        this.loadSettingsUI();
        document.getElementById('settingsModal').style.display = 'block';
    }

    showHistory() {
        this.loadHistoryUI();
        document.getElementById('historyModal').style.display = 'block';
    }

    closeModal(modal) {
        modal.style.display = 'none';
    }

    loadSettingsUI() {
        const settingsContent = document.getElementById('settingsContent');
        if (!settingsContent) return;

        settingsContent.innerHTML = `
            <div class="setting-group">
                <h3>üé® –í–Ω–µ—à–Ω–∏–π –≤–∏–¥</h3>
                <div class="setting-item">
                    <div class="setting-label">–¢–µ–º–∞</div>
                    <select class="setting-control" id="themeSelect">
                        <option value="auto">–ê–≤—Ç–æ</option>
                        <option value="light">–°–≤–µ—Ç–ª–∞—è</option>
                        <option value="dark">–¢–µ–º–Ω–∞—è</option>
                    </select>
                </div>
            </div>

            <div class="setting-group">
                <h3>üó∫Ô∏è –ö–∞—Ä—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</h3>
                <div class="setting-item">
                    <div class="setting-label">–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç</div>
                    <select class="setting-control" id="defaultMapsSelect">
                        <option value="internal">–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã</option>
                        <option value="external">–í–Ω–µ—à–Ω–∏–µ –∫–∞—Ä—Ç—ã (Google/Yandex)</option>
                    </select>
                </div>
            </div>

            <div class="setting-group">
                <h3>üìç –°–ª–µ–∂–µ–Ω–∏–µ –∑–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º</h3>
                <div class="setting-item">
                    <div class="setting-label">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ</div>
                    <label class="switch">
                        <input type="checkbox" id="showLocationToggle" checked>
                        <span class="slider"></span>
                    </label>
                </div>
                <div class="setting-item">
                    <div class="setting-label">–í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å GPS</div>
                    <label class="switch">
                        <input type="checkbox" id="highAccuracyToggle" checked>
                        <span class="slider"></span>
                    </label>
                </div>
            </div>

            <div class="setting-actions">
                <button class="btn primary" onclick="app.saveSettings()">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                <button class="btn secondary" onclick="app.resetSettings()">üîÑ –°–±—Ä–æ—Å–∏—Ç—å</button>
                <button class="btn secondary" onclick="app.closeModal(document.getElementById('settingsModal'))">‚ùå –û—Ç–º–µ–Ω–∞</button>
            </div>
        `;

        this.populateSettings();
    }

    populateSettings() {
        if (!window.appSettings) return;

        const settings = window.appSettings.settings;
        document.getElementById('themeSelect').value = settings.theme || 'auto';
        document.getElementById('defaultMapsSelect').value = settings.defaultMaps || 'internal';
        document.getElementById('showLocationToggle').checked = settings.showLocation !== false;
        document.getElementById('highAccuracyToggle').checked = settings.highAccuracy !== false;
    }

    saveSettings() {
        if (!window.appSettings) return;

        window.appSettings.settings.theme = document.getElementById('themeSelect').value;
        window.appSettings.settings.defaultMaps = document.getElementById('defaultMapsSelect').value;
        window.appSettings.settings.showLocation = document.getElementById('showLocationToggle').checked;
        window.appSettings.settings.highAccuracy = document.getElementById('highAccuracyToggle').checked;

        if (window.appSettings.saveSettings()) {
            this.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
            this.closeModal(document.getElementById('settingsModal'));
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
            if (!window.appSettings.settings.showLocation && this.userMarker) {
                this.map.removeLayer(this.userMarker);
                this.userMarker = null;
            }
        }
    }

    resetSettings() {
        if (window.appSettings) {
            window.appSettings.resetToDefaults();
            this.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã');
            this.loadSettingsUI();
        }
    }

    loadHistoryUI() {
        const historyContent = document.getElementById('historyContent');
        if (!historyContent || !window.coordinatesHistory) return;

        const history = window.coordinatesHistory.getRecentEntries(15);
        
        let historyHTML = `
            <div class="history-actions">
                <button class="btn secondary" onclick="app.exportHistory('gpx')">üì§ GPX</button>
                <button class="btn secondary" onclick="app.exportHistory('kml')">üì§ KML</button>
                <button class="btn secondary" onclick="app.exportHistory('csv')">üì§ CSV</button>
                <button class="btn danger" onclick="app.clearHistory()">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å</button>
            </div>
            <div class="history-list">
        `;

        if (history.length === 0) {
            historyHTML += '<div style="text-align: center; padding: 20px; color: #666;">–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</div>';
        } else {
            history.forEach(entry => {
                historyHTML += `
                    <div class="history-item" onclick="app.useHistoryEntry(${entry.latitude}, ${entry.longitude})">
                        <div><strong>${entry.name}</strong></div>
                        <div class="history-coords">–®: ${entry.latitude.toFixed(6)}</div>
                        <div class="history-coords">–î: ${entry.longitude.toFixed(6)}</div>
                        <div class="history-time">${new Date(entry.timestamp).toLocaleString()}</div>
                    </div>
                `;
            });
        }

        historyHTML += '</div>';
        historyContent.innerHTML = historyHTML;
    }

    useHistoryEntry(lat, lon) {
        this.updateCoordinates(lat, lon);
        this.closeModal(document.getElementById('historyModal'));
        this.log('üìÅ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏');
    }

    exportHistory(format) {
        if (!window.coordinatesHistory) return;

        switch (format) {
            case 'gpx':
                window.coordinatesHistory.exportToGPX();
                break;
            case 'kml':
                window.coordinatesHistory.exportToKML();
                break;
            case 'csv':
                window.coordinatesHistory.exportToCSV();
                break;
        }

        this.log(`‚úÖ –ò—Å—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ ${format.toUpperCase()}`);
    }

    clearHistory() {
        if (window.coordinatesHistory && confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç?')) {
            window.coordinatesHistory.clearHistory();
            this.loadHistoryUI();
            this.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞');
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let app;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    app = new MayakFinder();
});

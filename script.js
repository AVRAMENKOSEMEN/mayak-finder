// –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
class MayakFinder {
    constructor() {
        this.latitude = null;
        this.longitude = null;
        this.device = null;
        this.server = null;
        this.isConnected = false;
        
        this.init();
    }

    init() {
        this.bindEvents();
        this.checkOnlineStatus();
        this.loadSettingsUI();
        this.loadHistoryUI();
    }

    bindEvents() {
        // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        document.getElementById('connectBtn').addEventListener('click', () => this.connectBluetooth());
        document.getElementById('copyBtn').addEventListener('click', () => this.copyCoordinates());
        document.getElementById('openNavBtn').addEventListener('click', () => this.openNavigator()); // –ò–°–ü–†–ê–í–õ–ï–ù–û
        document.getElementById('testBtn').addEventListener('click', () => this.useTestData());
        
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–µ—Ç–æ–º
        document.getElementById('lightOnBtn').addEventListener('click', () => this.controlLight(true));
        document.getElementById('lightOffBtn').addEventListener('click', () => this.controlLight(false));
        
        // –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
        document.getElementById('settingsBtn').addEventListener('click', () => this.showSettings());
        document.getElementById('historyBtn').addEventListener('click', () => this.showHistory());
        
        // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        document.querySelectorAll('.close-modal').forEach(btn => {
            btn.addEventListener('click', (e) => this.closeModal(e.target.closest('.modal')));
        });

        document.querySelectorAll('.modal').forEach(modal => {
            modal.addEventListener('click', (e) => {
                if (e.target === modal) this.closeModal(modal);
            });
        });

        window.addEventListener('online', () => this.updateOnlineStatus(true));
        window.addEventListener('offline', () => this.updateOnlineStatus(false));
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î - –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞
    openNavigator() {
        console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä...');
        
        if (this.latitude && this.longitude) {
            const navUrl = `navigator.html?lat=${this.latitude}&lon=${this.longitude}`;
            console.log('üìç URL –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞:', navUrl);
            
            // –ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ/–≤–∫–ª–∞–¥–∫–µ
            try {
                const newWindow = window.open(navUrl, '_blank');
                
                if (newWindow) {
                    console.log('‚úÖ –ù–∞–≤–∏–≥–∞—Ç–æ—Ä –æ—Ç–∫—Ä—ã—Ç –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ');
                    this.log('üß≠ –ù–∞–≤–∏–≥–∞—Ç–æ—Ä –æ—Ç–∫—Ä—ã—Ç');
                    
                    // –§–æ–∫—É—Å –Ω–∞ –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
                    setTimeout(() => {
                        if (newWindow) {
                            newWindow.focus();
                        }
                    }, 100);
                } else {
                    // –ï—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª popup, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ —Ç–µ–∫—É—â–µ–º –æ–∫–Ω–µ
                    console.log('‚ö†Ô∏è Popup –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ —Ç–µ–∫—É—â–µ–º –æ–∫–Ω–µ');
                    window.location.href = navUrl;
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞:', error);
                this.fallbackNavigation();
            }
        } else {
            this.log('‚ùå –ù–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
            alert('–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–∞—è–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ Bluetooth)');
        }
    }

    // –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    fallbackNavigation() {
        if (this.latitude && this.longitude) {
            // –ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
            const universalUrl = `https://www.openstreetmap.org/?mlat=${this.latitude}&mlon=${this.longitude}#map=15/${this.latitude}/${this.longitude}`;
            window.open(universalUrl, '_blank');
            this.log('üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä (OpenStreetMap)');
        }
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    async connectBluetooth() {
        try {
            this.log('üîµ –ü–æ–∏—Å–∫ Bluetooth —É—Å—Ç—Ä–æ–π—Å—Ç–≤...');
            
            if (!navigator.bluetooth) {
                throw new Error('Bluetooth –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º');
            }

            this.device = await navigator.bluetooth.requestDevice({
                filters: [{ namePrefix: 'Mayak' }],
                optionalServices: ['battery_service', 'device_information']
            });

            this.log('üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–æ: ' + this.device.name);
            
            this.device.addEventListener('gattserverdisconnected', () => {
                this.onDisconnected();
            });

            const server = await this.device.gatt.connect();
            this.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ GATT —Å–µ—Ä–≤–µ—Ä—É');

            await this.setupBluetoothServices(server);
            
            this.isConnected = true;
            this.updateConnectionStatus(true);
            
            if (window.notificationManager) {
                window.notificationManager.showConnectionNotification(true, this.device.name);
            }

        } catch (error) {
            this.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ' + error.message);
            this.updateConnectionStatus(false);
        }
    }

    async setupBluetoothServices(server) {
        try {
            // –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –†–ï–ê–õ–¨–ù–´–ï UUID –í–ê–®–ï–ì–û –£–°–¢–†–û–ô–°–¢–í–ê
            const service = await server.getPrimaryService('12345678-1234-5678-9abc-123456789abc');
            const characteristic = await service.getCharacteristic('12345678-1234-5678-9abc-123456789abd');
            
            await characteristic.startNotifications();
            characteristic.addEventListener('characteristicvaluechanged', 
                (event) => this.handleData(event.target.value));
                
            this.log('‚úÖ –°–µ—Ä–≤–∏—Å—ã Bluetooth –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        } catch (error) {
            this.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã: ' + error.message);
        }
    }

    handleData(data) {
        try {
            const textDecoder = new TextDecoder();
            const coordinates = textDecoder.decode(data).split(',');
            
            if (coordinates.length === 2) {
                const lat = parseFloat(coordinates[0]);
                const lon = parseFloat(coordinates[1]);
                
                if (!isNaN(lat) && !isNaN(lon)) {
                    this.updateCoordinates(lat, lon);
                    
                    if (window.coordinatesHistory) {
                        window.coordinatesHistory.addEntry(lat, lon);
                    }
                    
                    if (window.notificationManager) {
                        window.notificationManager.showNewCoordinateAlert({lat, lon});
                    }
                }
            }
        } catch (error) {
            this.log('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
        }
    }

    updateCoordinates(lat, lon) {
        this.latitude = lat;
        this.longitude = lon;
        
        const coordsText = `–®: ${lat.toFixed(6)}, –î: ${lon.toFixed(6)}`;
        document.getElementById('coordinatesText').textContent = coordsText;
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        document.getElementById('copyBtn').disabled = false;
        document.getElementById('openNavBtn').disabled = false;
        document.getElementById('lightOnBtn').disabled = false;
        document.getElementById('lightOffBtn').disabled = false;
        
        this.log('üìç –ù–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ' + coordsText);
        this.updateMap(lat, lon);
    }

    updateMap(lat, lon) {
        const mapContainer = document.getElementById('staticMap');
        
        if (window.offlineMap && window.offlineMap.isInitialized) {
            window.offlineMap.addTargetMarker(lat, lon, '–¢–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –º–∞—è–∫–∞');
            window.offlineMap.map.setView([lat, lon], 15);
        } else {
            mapContainer.innerHTML = `
                <div class="map-content">
                    <div style="font-size: 32px; margin-bottom: 10px;">üéØ</div>
                    <div class="coordinates-display">–®: ${lat.toFixed(6)}</div>
                    <div class="coordinates-display">–î: ${lon.toFixed(6)}</div>
                    <div style="font-size: 12px; color: #666; margin-top: 10px;">
                        ${new Date().toLocaleTimeString()}
                    </div>
                </div>
            `;
        }
    }

    async controlLight(on) {
        if (!this.device || !this.isConnected) return;
        
        try {
            this.log(on ? 'üí° –í–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–µ—Ç–∞...' : 'üîå –í—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–µ—Ç–∞...');
            // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            this.log(on ? '‚úÖ –°–≤–µ—Ç –≤–∫–ª—é—á–µ–Ω' : '‚úÖ –°–≤–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω');
        } catch (error) {
            this.log('‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–µ—Ç–æ–º: ' + error.message);
        }
    }

    copyCoordinates() {
        if (this.latitude && this.longitude) {
            const text = `${this.latitude},${this.longitude}`;
            navigator.clipboard.writeText(text).then(() => {
                this.log('‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä');
                
                const btn = document.getElementById('copyBtn');
                const originalText = btn.textContent;
                btn.textContent = '‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
                setTimeout(() => {
                    btn.textContent = originalText;
                }, 2000);
            });
        }
    }

    useTestData() {
        const testLat = 55.241867 + (Math.random() - 0.5) * 0.01;
        const testLon = 72.908588 + (Math.random() - 0.5) * 0.01;
        
        this.updateCoordinates(testLat, testLon);
        this.log('üß™ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
    }

    onDisconnected() {
        this.isConnected = false;
        this.updateConnectionStatus(false);
        this.log('üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
        
        if (window.notificationManager) {
            window.notificationManager.showConnectionNotification(false);
        }
    }

    updateConnectionStatus(connected) {
        const status = document.getElementById('status');
        status.textContent = connected ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : '‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ';
        status.className = `status ${connected ? 'online' : 'offline'}`;
        
        document.getElementById('connectBtn').textContent = 
            connected ? 'üîó –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è' : 'üì° –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Bluetooth';
    }

    updateOnlineStatus(online) {
        const status = document.getElementById('onlineStatus');
        status.textContent = online ? 'üü¢ –û–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º' : 'üî¥ –†–µ–∂–∏–º –æ—Ñ—Ñ–ª–∞–π–Ω';
        status.className = `status ${online ? 'online' : 'offline'}`;
    }

    checkOnlineStatus() {
        this.updateOnlineStatus(navigator.onLine);
    }

    log(message) {
        const logElement = document.getElementById('dataLog');
        const timestamp = new Date().toLocaleTimeString();
        const entry = document.createElement('div');
        entry.textContent = `[${timestamp}] ${message}`;
        logElement.prepend(entry);
        
        while (logElement.children.length > 20) {
            logElement.removeChild(logElement.lastChild);
        }
    }

    showSettings() {
        this.loadSettingsUI();
        document.getElementById('settingsModal').style.display = 'block';
    }

    showHistory() {
        this.loadHistoryUI();
        document.getElementById('historyModal').style.display = 'block';
    }

    closeModal(modal) {
        modal.style.display = 'none';
    }

    loadSettingsUI() {
        const settingsContent = document.getElementById('settingsContent');
        if (!settingsContent) return;

        settingsContent.innerHTML = `
            <div class="setting-group">
                <h3>üé® –í–Ω–µ—à–Ω–∏–π –≤–∏–¥</h3>
                <div class="setting-item">
                    <div class="setting-label">–¢–µ–º–∞</div>
                    <select class="setting-control" id="themeSelect">
                        <option value="auto">–ê–≤—Ç–æ</option>
                        <option value="light">–°–≤–µ—Ç–ª–∞—è</option>
                        <option value="dark">–¢–µ–º–Ω–∞—è</option>
                    </select>
                </div>
            </div>

            <div class="setting-group">
                <h3>üìè –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è</h3>
                <div class="setting-item">
                    <div class="setting-label">–°–∏—Å—Ç–µ–º–∞ –µ–¥–∏–Ω–∏—Ü</div>
                    <select class="setting-control" id="unitsSelect">
                        <option value="metric">–ú–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è (–∫–º)</option>
                        <option value="imperial">–ò–º–ø–µ—Ä—Å–∫–∞—è (–º–∏–ª–∏)</option>
                    </select>
                </div>
            </div>

            <div class="setting-group">
                <h3>üîä –ì–æ–ª–æ—Å–æ–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏</h3>
                <div class="setting-item">
                    <div class="setting-label">–í–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>
                    <label class="switch">
                        <input type="checkbox" id="voiceGuidanceToggle">
                        <span class="slider"></span>
                    </label>
                </div>
            </div>

            <div class="setting-group">
                <h3>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
                <div class="setting-item">
                    <div class="setting-label">–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</div>
                    <label class="switch">
                        <input type="checkbox" id="notificationsToggle">
                        <span class="slider"></span>
                    </label>
                </div>
                <div class="setting-item">
                    <div class="setting-label">–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏</div>
                    <label class="switch">
                        <input type="checkbox" id="proximityAlertToggle">
                        <span class="slider"></span>
                    </label>
                </div>
            </div>

            <div class="setting-group">
                <h3>üó∫Ô∏è –ö–∞—Ä—Ç—ã</h3>
                <div class="setting-item">
                    <div class="setting-label">–û—Ñ—Ñ–ª–∞–π–Ω –∫–∞—Ä—Ç—ã</div>
                    <label class="switch">
                        <input type="checkbox" id="offlineMapsToggle">
                        <span class="slider"></span>
                    </label>
                </div>
            </div>

            <div class="setting-actions">
                <button class="btn primary" onclick="app.saveSettings()">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                <button class="btn secondary" onclick="app.resetSettings()">üîÑ –°–±—Ä–æ—Å–∏—Ç—å</button>
            </div>
        `;

        this.populateSettings();
    }

    populateSettings() {
        if (!window.appSettings) return;

        document.getElementById('themeSelect').value = window.appSettings.settings.theme;
        document.getElementById('unitsSelect').value = window.appSettings.settings.units;
        document.getElementById('voiceGuidanceToggle').checked = window.appSettings.settings.voiceGuidance;
        document.getElementById('notificationsToggle').checked = window.appSettings.settings.notifications;
        document.getElementById('proximityAlertToggle').checked = window.appSettings.settings.proximityAlert;
        document.getElementById('offlineMapsToggle').checked = window.appSettings.settings.offlineTiles;
    }

    saveSettings() {
        if (!window.appSettings) return;

        window.appSettings.settings.theme = document.getElementById('themeSelect').value;
        window.appSettings.settings.units = document.getElementById('unitsSelect').value;
        window.appSettings.settings.voiceGuidance = document.getElementById('voiceGuidanceToggle').checked;
        window.appSettings.settings.notifications = document.getElementById('notificationsToggle').checked;
        window.appSettings.settings.proximityAlert = document.getElementById('proximityAlertToggle').checked;
        window.appSettings.settings.offlineTiles = document.getElementById('offlineMapsToggle').checked;

        if (window.appSettings.saveSettings()) {
            this.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
            this.closeModal(document.getElementById('settingsModal'));
            
            if (window.voiceGuide) {
                if (window.appSettings.settings.voiceGuidance) {
                    window.voiceGuide.enable();
                } else {
                    window.voiceGuide.disable();
                }
            }
        } else {
            this.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
        }
    }

    resetSettings() {
        if (window.appSettings) {
            window.appSettings.resetToDefaults();
            this.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
        }
    }

    loadHistoryUI() {
        const historyContent = document.getElementById('historyContent');
        if (!historyContent || !window.coordinatesHistory) return;

        const history = window.coordinatesHistory.getRecentEntries(20);
        
        let historyHTML = `
            <div class="history-actions">
                <button class="btn secondary" onclick="app.exportHistory('gpx')">üì§ GPX</button>
                <button class="btn secondary" onclick="app.exportHistory('kml')">üì§ KML</button>
                <button class="btn secondary" onclick="app.exportHistory('csv')">üì§ CSV</button>
                <button class="btn danger" onclick="app.clearHistory()">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å</button>
            </div>
            <div class="history-list">
        `;

        if (history.length === 0) {
            historyHTML += '<div style="text-align: center; padding: 20px; color: #666;">–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</div>';
        } else {
            history.forEach(entry => {
                historyHTML += `
                    <div class="history-item" onclick="app.useHistoryEntry(${entry.latitude}, ${entry.longitude})">
                        <div><strong>${entry.name}</strong></div>
                        <div class="history-coords">–®: ${entry.latitude.toFixed(6)}, –î: ${entry.longitude.toFixed(6)}</div>
                        <div class="history-time">${new Date(entry.timestamp).toLocaleString()}</div>
                    </div>
                `;
            });
        }

        historyHTML += '</div>';
        historyContent.innerHTML = historyHTML;
    }

    useHistoryEntry(lat, lon) {
        this.updateCoordinates(lat, lon);
        this.closeModal(document.getElementById('historyModal'));
        this.log('üìÅ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏');
    }

    exportHistory(format) {
        if (!window.coordinatesHistory) return;

        switch (format) {
            case 'gpx':
                window.coordinatesHistory.exportToGPX();
                break;
            case 'kml':
                window.coordinatesHistory.exportToKML();
                break;
            case 'csv':
                window.coordinatesHistory.exportToCSV();
                break;
        }

        this.log(`‚úÖ –ò—Å—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ ${format.toUpperCase()}`);
    }

    clearHistory() {
        if (window.coordinatesHistory) {
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é?')) {
                window.coordinatesHistory.clearHistory();
                this.loadHistoryUI();
                this.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞');
            }
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let app;

document.addEventListener('DOMContentLoaded', () => {
    app = new MayakFinder();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ñ—Ñ–ª–∞–π–Ω –∫–∞—Ä—Ç
    if (window.offlineMap) {
        setTimeout(() => {
            const mapContainer = document.getElementById('map');
            if (mapContainer) {
                window.offlineMap.init('map', [55.241867, 72.908588], 10);
            }
        }, 500);
    }
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ HTML
window.openNavigator = function() {
    if (app) app.openNavigator();
};

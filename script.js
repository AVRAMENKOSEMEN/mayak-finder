class MayakFinder {
    constructor() {
        this.device = null;
        this.server = null;
        this.rxCharacteristic = null;
        this.txCharacteristic = null;
        
        // –§–∏–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.latitude = 55.241867942983404;
        this.longitude = 72.90858878021125;
        
        this.map = null;
        this.marker = null;
        this.isConnected = false;
        
        this.initializeElements();
        this.setupEventListeners();
        this.initializeTestData(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    }
    
    initializeElements() {
        this.connectBtn = document.getElementById('connectBtn');
        this.statusDiv = document.getElementById('status');
        this.coordinatesText = document.getElementById('coordinatesText');
        this.copyBtn = document.getElementById('copyBtn');
        this.openMapsBtn = document.getElementById('openMapsBtn');
        this.findBtn = document.getElementById('findBtn');
        this.mapDiv = document.getElementById('map');
        this.dataLog = document.getElementById('dataLog');
    }
    
    setupEventListeners() {
        this.connectBtn.addEventListener('click', () => this.connectToDevice());
        this.copyBtn.addEventListener('click', () => this.copyCoordinates());
        this.openMapsBtn.addEventListener('click', () => this.openInMaps());
        this.findBtn.addEventListener('click', () => this.sendFindCommand());
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const testBtn = document.createElement('button');
        testBtn.textContent = 'üß™ –¢–µ—Å—Ç: –ò–º–∏—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –º–∞—è–∫–∞';
        testBtn.className = 'btn secondary';
        testBtn.addEventListener('click', () => this.simulateMayakData());
        document.querySelector('.actions').appendChild(testBtn);
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    initializeTestData() {
        this.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.');
        this.updateCoordinates();
        this.updateMap();
        this.setButtonsState(true); // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        this.updateStatus('–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (—Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)', 'connected');
    }
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –º–∞—è–∫–∞
    simulateMayakData() {
        const testCoordinates = [
            { lat: 55.241867942983404, lon: 72.90858878021125, name: "–û—Å–Ω–æ–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è" },
            { lat: 55.2420, lon: 72.9090, name: "–°–º–µ—â–µ–Ω–∏–µ +10–º" },
            { lat: 55.2415, lon: 72.9080, name: "–°–º–µ—â–µ–Ω–∏–µ -10–º" },
            { lat: 55.2419, lon: 72.9089, name: "–¢–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ" }
        ];
        
        const randomCoord = testCoordinates[Math.floor(Math.random() * testCoordinates.length)];
        
        this.latitude = randomCoord.lat;
        this.longitude = randomCoord.lon;
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ Bluetooth
        this.log(`[–ò–ú–ò–¢–ê–¶–ò–Ø] –ü–æ–ª—É—á–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${randomCoord.name}`);
        this.log(`[–ò–ú–ò–¢–ê–¶–ò–Ø] GPS:${this.latitude},${this.longitude}`);
        
        this.updateCoordinates();
        this.updateMap();
    }
    
    async connectToDevice() {
        try {
            this.log('–ü–æ–∏—Å–∫ BLE —É—Å—Ç—Ä–æ–π—Å—Ç–≤...');
            
            if (!navigator.bluetooth) {
                this.log('–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Web Bluetooth API');
                this.updateStatus('–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Bluetooth', 'error');
                return;
            }
            
            // UUID –¥–ª—è Nordic UART Service (NUS)
            const UART_SERVICE_UUID = '6e400001-b5a3-f393-e0a9-e50e24dcca9e';
            const TX_CHARACTERISTIC_UUID = '6e400003-b5a3-f393-e0a9-e50e24dcca9e';
            const RX_CHARACTERISTIC_UUID = '6e400002-b5a3-f393-e0a9-e50e24dcca9e';
            
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å UART —Å–µ—Ä–≤–∏—Å–æ–º
            this.device = await navigator.bluetooth.requestDevice({
                filters: [
                    { name: 'My nRF52 Beacon' },
                    { namePrefix: 'nRF52' },
                    { services: [UART_SERVICE_UUID] } // –§–∏–ª—å—Ç—Ä –ø–æ —Å–µ—Ä–≤–∏—Å—É
                ],
                optionalServices: [UART_SERVICE_UUID]
            });
            
            this.log(`–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ ${this.device.name}...`);
            this.updateStatus('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...', 'connecting');
            
            this.device.addEventListener('gattserverdisconnected', () => {
                this.onDisconnected();
            });
            
            const server = await this.device.gatt.connect();
            this.server = server;
            
            // –ü–æ–ª—É—á–∞–µ–º UART —Å–µ—Ä–≤–∏—Å
            const service = await server.getPrimaryService(UART_SERVICE_UUID);
            
            // –ü–æ–ª—É—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–∏–µ–º–∞ (TX) –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ (RX) –¥–∞–Ω–Ω—ã—Ö
            this.txCharacteristic = await service.getCharacteristic(TX_CHARACTERISTIC_UUID);
            this.rxCharacteristic = await service.getCharacteristic(RX_CHARACTERISTIC_UUID);
            
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            await this.txCharacteristic.startNotifications();
            this.txCharacteristic.addEventListener('characteristicvaluechanged', 
                (event) => this.handleDataReceived(event));
            
            this.isConnected = true;
            this.log('–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ! –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
            this.updateStatus('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –º–∞—è–∫—É', 'connected');
            this.setButtonsState(true);
            
        } catch (error) {
            this.log(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error}`);
            this.updateStatus('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', 'error');
            
            // –ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Å—Ç–∞–µ–º—Å—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            this.log('–û—Å—Ç–∞—é—Å—å –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏');
            this.updateStatus('–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (Bluetooth –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)', 'connected');
        }
    }
    
    handleDataReceived(event) {
        const value = event.target.value;
        const decoder = new TextDecoder();
        const data = decoder.decode(value);
        
        this.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å –º–∞—è–∫–∞: ${data}`);
        
        // –ü–∞—Ä—Å–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ "GPS:55.75,37.61"
        if (data.startsWith('GPS:')) {
            const coords = data.replace('GPS:', '').split(',');
            if (coords.length === 2) {
                this.latitude = parseFloat(coords[0]);
                this.longitude = parseFloat(coords[1]);
                this.updateCoordinates();
                this.log('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å –º–∞—è–∫–∞');
            }
        }
    }
    
    updateCoordinates() {
        const coordsText = `–®–∏—Ä–æ—Ç–∞: ${this.latitude.toFixed(6)}, –î–æ–ª–≥–æ—Ç–∞: ${this.longitude.toFixed(6)}`;
        this.coordinatesText.textContent = coordsText;
        this.updateMap();
    }
    
    updateMap() {
        if (!this.latitude || !this.longitude) return;
        
        // –ü—Ä–æ—Å—Ç–∞—è –º–∏–Ω–∏-–∫–∞—Ä—Ç–∞ —Å OpenStreetMap
        const mapUrl = `https://www.openstreetmap.org/export/embed.html?bbox=${this.longitude-0.001},${this.latitude-0.001},${this.longitude+0.001},${this.latitude+0.001}&marker=${this.latitude},${this.longitude}&layer=mapnik`;
        
        this.mapDiv.innerHTML = `
            <iframe 
                width="100%" 
                height="100%" 
                frameborder="0" 
                scrolling="no" 
                marginheight="0" 
                marginwidth="0" 
                src="${mapUrl}"
                style="border-radius: 5px;"
                title="–ö–∞—Ä—Ç–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –º–∞—è–∫–∞">
            </iframe>
            <div style="text-align: center; margin-top: 5px; font-size: 12px; color: #666;">
                –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${this.latitude.toFixed(6)}, ${this.longitude.toFixed(6)}
            </div>
        `;
    }
    
    async sendFindCommand() {
        if (!this.isConnected) {
            this.log('[–¢–ï–°–¢] –ö–æ–º–∞–Ω–¥–∞ FIND –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (–∏–º–∏—Ç–∞—Ü–∏—è)');
            this.log('[–¢–ï–°–¢] –°–≤–µ—Ç –∏ –∑–≤—É–∫ –Ω–∞ –º–∞—è–∫–µ –¥–æ–ª–∂–Ω—ã –≤–∫–ª—é—á–∏—Ç—å—Å—è');
            return;
        }
        
        if (!this.rxCharacteristic) {
            this.log('–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É');
            return;
        }
        
        try {
            const encoder = new TextEncoder();
            const data = encoder.encode('FIND');
            await this.rxCharacteristic.writeValue(data);
            this.log('–ö–æ–º–∞–Ω–¥–∞ FIND –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–∞—è–∫');
        } catch (error) {
            this.log(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: ${error}`);
        }
    }
    
    async copyCoordinates() {
        if (this.latitude && this.longitude) {
            const coords = `${this.latitude},${this.longitude}`;
            try {
                await navigator.clipboard.writeText(coords);
                this.log('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
                
                // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                const originalText = this.copyBtn.textContent;
                this.copyBtn.textContent = '‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
                setTimeout(() => {
                    this.copyBtn.textContent = originalText;
                }, 2000);
            } catch (error) {
                // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
                const textArea = document.createElement('textarea');
                textArea.value = coords;
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
                this.log('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)');
            }
        }
    }
    
    openInMaps() {
        if (this.latitude && this.longitude) {
            // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ä—Ç
            const choice = confirm('–û—Ç–∫—Ä—ã—Ç—å –≤ Google –ö–∞—Ä—Ç–∞—Ö (OK) –∏–ª–∏ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∞—Ö (–û—Ç–º–µ–Ω–∞)?');
            
            if (choice) {
                // Google –ö–∞—Ä—Ç—ã
                const googleUrl = `https://www.google.com/maps/search/?api=1&query=${this.latitude},${this.longitude}`;
                window.open(googleUrl, '_blank');
                this.log('–û—Ç–∫—Ä—ã–≤–∞—é –≤ Google –ö–∞—Ä—Ç–∞—Ö');
            } else {
                // –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã
                const yandexUrl = `https://yandex.ru/maps/?pt=${this.longitude},${this.latitude}&z=17`;
                window.open(yandexUrl, '_blank');
                this.log('–û—Ç–∫—Ä—ã–≤–∞—é –≤ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∞—Ö');
            }
        }
    }
    
    onDisconnected() {
        this.log('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ');
        this.updateStatus('–û—Ç–∫–ª—é—á–µ–Ω–æ', 'disconnected');
        this.setButtonsState(false);
        this.isConnected = false;
        this.device = null;
        this.server = null;
    }
    
    updateStatus(message, type) {
        this.statusDiv.textContent = message;
        this.statusDiv.className = `status ${type}`;
    }
    
    setButtonsState(enabled) {
        this.copyBtn.disabled = !enabled;
        this.openMapsBtn.disabled = !enabled;
        this.findBtn.disabled = !enabled;
    }
    
    log(message) {
        const timestamp = new Date().toLocaleTimeString();
        const logEntry = document.createElement('div');
        logEntry.textContent = `[${timestamp}] ${message}`;
        this.dataLog.appendChild(logEntry);
        this.dataLog.scrollTop = this.dataLog.scrollHeight;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
document.addEventListener('DOMContentLoaded', () => {
    new MayakFinder();
});

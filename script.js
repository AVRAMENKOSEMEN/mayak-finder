class MayakFinder {
    constructor() {
        this.device = null;
        this.server = null;
        this.rxCharacteristic = null;
        this.txCharacteristic = null;
        
        this.latitude = 55.241867942983404;
        this.longitude = 72.90858878021125;
        
        this.isConnected = false;
        
        this.initializeElements();
        this.setupEventListeners();
        this.initializeTestData();
    }
    
    initializeElements() {
        this.connectBtn = document.getElementById('connectBtn');
        this.statusDiv = document.getElementById('status');
        this.coordinatesText = document.getElementById('coordinatesText');
        this.copyBtn = document.getElementById('copyBtn');
        this.openNavBtn = document.getElementById('openNavBtn');
        this.lightOnBtn = document.getElementById('lightOnBtn');
        this.lightOffBtn = document.getElementById('lightOffBtn');
        this.testBtn = document.getElementById('testBtn');
        this.staticMap = document.getElementById('staticMap');
        this.dataLog = document.getElementById('dataLog');
    }
    
    setupEventListeners() {
        this.connectBtn.addEventListener('click', () => this.connectToDevice());
        this.copyBtn.addEventListener('click', () => this.copyCoordinates());
        this.openNavBtn.addEventListener('click', () => this.openNavigator());
        this.lightOnBtn.addEventListener('click', () => this.turnLightOn());
        this.lightOffBtn.addEventListener('click', () => this.turnLightOff());
        this.testBtn.addEventListener('click', () => this.simulateMayakData());
    }
    
    initializeTestData() {
        this.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º.');
        this.updateCoordinates();
        this.updateMap();
        this.setButtonsState(true);
        this.updateStatus('–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º', 'connected');
    }
    
    simulateMayakData() {
        const testCoordinates = [
            { lat: 55.241867942983404, lon: 72.90858878021125, name: "–û—Å–Ω–æ–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è" },
            { lat: 55.2420, lon: 72.9090, name: "–°–º–µ—â–µ–Ω–∏–µ +10–º" },
            { lat: 55.2415, lon: 72.9080, name: "–°–º–µ—â–µ–Ω–∏–µ -10–º" },
            { lat: 55.2418, lon: 72.9085, name: "–¢–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ" }
        ];
        
        const randomCoord = testCoordinates[Math.floor(Math.random() * testCoordinates.length)];
        
        this.latitude = randomCoord.lat;
        this.longitude = randomCoord.lon;
        
        this.log(`[–¢–ï–°–¢] –ù–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${randomCoord.name}`);
        this.log(`[–¢–ï–°–¢] GPS:${this.latitude},${this.longitude}`);
        
        this.updateCoordinates();
        this.updateMap();
    }
    
    async connectToDevice() {
        try {
            this.log('–ü–æ–∏—Å–∫ BLE —É—Å—Ç—Ä–æ–π—Å—Ç–≤...');
            
            if (!navigator.bluetooth) {
                this.log('–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Web Bluetooth API');
                this.updateStatus('Bluetooth –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è', 'error');
                return;
            }
            
            const UART_SERVICE_UUID = '6e400001-b5a3-f393-e0a9-e50e24dcca9e';
            const TX_CHARACTERISTIC_UUID = '6e400003-b5a3-f393-e0a9-e50e24dcca9e';
            const RX_CHARACTERISTIC_UUID = '6e400002-b5a3-f393-e0a9-e50e24dcca9e';
            
            this.device = await navigator.bluetooth.requestDevice({
                filters: [
                    { name: 'My nRF52 Beacon' },
                    { namePrefix: 'nRF52' },
                    { services: [UART_SERVICE_UUID] }
                ],
                optionalServices: [UART_SERVICE_UUID]
            });
            
            this.log(`–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ ${this.device.name}...`);
            this.updateStatus('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...', 'connecting');
            
            this.device.addEventListener('gattserverdisconnected', () => {
                this.onDisconnected();
            });
            
            const server = await this.device.gatt.connect();
            this.server = server;
            
            const service = await server.getPrimaryService(UART_SERVICE_UUID);
            
            this.txCharacteristic = await service.getCharacteristic(TX_CHARACTERISTIC_UUID);
            this.rxCharacteristic = await service.getCharacteristic(RX_CHARACTERISTIC_UUID);
            
            await this.txCharacteristic.startNotifications();
            this.txCharacteristic.addEventListener('characteristicvaluechanged', 
                (event) => this.handleDataReceived(event));
            
            this.isConnected = true;
            this.log('–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ! –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
            this.updateStatus('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –º–∞—è–∫—É', 'connected');
            this.setButtonsState(true);
            
        } catch (error) {
            this.log(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error}`);
            this.updateStatus('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', 'error');
            this.log('–û—Å—Ç–∞—é—Å—å –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏');
            this.updateStatus('–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (Bluetooth –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)', 'connected');
        }
    }
    
    handleDataReceived(event) {
        const value = event.target.value;
        const decoder = new TextDecoder();
        const data = decoder.decode(value);
        
        this.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å –º–∞—è–∫–∞: ${data}`);
        
        if (data.startsWith('GPS:')) {
            const coords = data.replace('GPS:', '').split(',');
            if (coords.length === 2) {
                this.latitude = parseFloat(coords[0]);
                this.longitude = parseFloat(coords[1]);
                this.updateCoordinates();
                this.log('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å –º–∞—è–∫–∞');
            }
        }
    }
    
    updateCoordinates() {
        const coordsText = `–®–∏—Ä–æ—Ç–∞: ${this.latitude.toFixed(6)}, –î–æ–ª–≥–æ—Ç–∞: ${this.longitude.toFixed(6)}`;
        this.coordinatesText.textContent = coordsText;
        this.updateMap();
    }
    
    updateMap() {
        if (!this.latitude || !this.longitude) return;
        
        this.staticMap.innerHTML = `
            <div class="map-content">
                <div style="font-size: 36px; margin-bottom: 10px;">üìç</div>
                <div style="font-weight: bold; margin-bottom: 15px; color: #333;">–ü–æ–ª–æ–∂–µ–Ω–∏–µ –º–∞—è–∫–∞</div>
                
                <div class="coordinates-display">
                    <div>–®–∏—Ä–æ—Ç–∞: <strong>${this.latitude.toFixed(6)}</strong></div>
                    <div>–î–æ–ª–≥–æ—Ç–∞: <strong>${this.longitude.toFixed(6)}</strong></div>
                </div>
                
                <button onclick="window.open('navigator.html?lat=${this.latitude}&lon=${this.longitude}', '_blank')" 
                        class="btn secondary" 
                        style="margin-top: 15px; padding: 8px 15px; font-size: 14px;">
                    üß≠ –û—Ç–∫—Ä—ã—Ç—å –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä
                </button>
            </div>
        `;
    }
    
    async turnLightOn() {
        if (!this.isConnected) {
            this.log('[–¢–ï–°–¢] –ö–æ–º–∞–Ω–¥–∞ –í–ö–õ–Æ–ß–ò–¢–¨ —Å–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
            this.log('[–¢–ï–°–¢] –°–≤–µ—Ç –∏ –∑–≤—É–∫ –Ω–∞ –º–∞—è–∫–µ –¥–æ–ª–∂–Ω—ã –≤–∫–ª—é—á–∏—Ç—å—Å—è');
            alert('[–¢–ï–°–¢] –ö–æ–º–∞–Ω–¥–∞ "–í–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –°–≤–µ—Ç –∏ –∑–≤—É–∫ –≤–∫–ª—é—á–µ–Ω—ã (–∏–º–∏—Ç–∞—Ü–∏—è)');
            return;
        }
        
        if (!this.rxCharacteristic) {
            this.log('–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É');
            return;
        }
        
        try {
            const encoder = new TextEncoder();
            const data = encoder.encode('CMD:LED_ON');
            await this.rxCharacteristic.writeValue(data);
            this.log('–ö–æ–º–∞–Ω–¥–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —Å–≤–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–∞—è–∫');
        } catch (error) {
            this.log(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: ${error}`);
        }
    }
    
    async turnLightOff() {
        if (!this.isConnected) {
            this.log('[–¢–ï–°–¢] –ö–æ–º–∞–Ω–¥–∞ –í–´–ö–õ–Æ–ß–ò–¢–¨ —Å–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
            this.log('[–¢–ï–°–¢] –°–≤–µ—Ç –∏ –∑–≤—É–∫ –Ω–∞ –º–∞—è–∫–µ –¥–æ–ª–∂–Ω—ã –≤—ã–∫–ª—é—á–∏—Ç—å—Å—è');
            alert('[–¢–ï–°–¢] –ö–æ–º–∞–Ω–¥–∞ "–í—ã–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –°–≤–µ—Ç –∏ –∑–≤—É–∫ –≤—ã–∫–ª—é—á–µ–Ω—ã (–∏–º–∏—Ç–∞—Ü–∏—è)');
            return;
        }
        
        if (!this.rxCharacteristic) {
            this.log('–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É');
            return;
        }
        
        try {
            const encoder = new TextEncoder();
            const data = encoder.encode('CMD:LED_OFF');
            await this.rxCharacteristic.writeValue(data);
            this.log('–ö–æ–º–∞–Ω–¥–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è —Å–≤–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–∞—è–∫');
        } catch (error) {
            this.log(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: ${error}`);
        }
    }
    
    openNavigator() {
        if (this.latitude && this.longitude) {
            window.open(`navigator.html?lat=${this.latitude}&lon=${this.longitude}`, '_blank');
            this.log('–û—Ç–∫—Ä—ã–≤–∞—é –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä');
        }
    }
    
    async copyCoordinates() {
        if (this.latitude && this.longitude) {
            const coords = `${this.latitude},${this.longitude}`;
            try {
                await navigator.clipboard.writeText(coords);
                this.log('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
                
                const originalText = this.copyBtn.textContent;
                this.copyBtn.textContent = '‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
                setTimeout(() => {
                    this.copyBtn.textContent = originalText;
                }, 2000);
            } catch (error) {
                const textArea = document.createElement('textarea');
                textArea.value = coords;
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
                this.log('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)');
            }
        }
    }
    
    onDisconnected() {
        this.log('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ');
        this.updateStatus('–û—Ç–∫–ª—é—á–µ–Ω–æ', 'disconnected');
        this.setButtonsState(false);
        this.isConnected = false;
        this.device = null;
        this.server = null;
    }
    
    updateStatus(message, type) {
        this.statusDiv.textContent = message;
        this.statusDiv.className = `status ${type}`;
    }
    
    setButtonsState(enabled) {
        this.copyBtn.disabled = !enabled;
        this.openNavBtn.disabled = !enabled;
        this.lightOnBtn.disabled = !enabled;
        this.lightOffBtn.disabled = !enabled;
    }
    
    log(message) {
        const timestamp = new Date().toLocaleTimeString();
        const logEntry = document.createElement('div');
        logEntry.textContent = `[${timestamp}] ${message}`;
        this.dataLog.appendChild(logEntry);
        this.dataLog.scrollTop = this.dataLog.scrollHeight;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    new MayakFinder();
});

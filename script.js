class MayakFinder {
    constructor() {
        this.device = null;
        this.server = null;
        this.rxCharacteristic = null;
        this.txCharacteristic = null;
        
        // –§–∏–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.latitude = 55.241867942983404;
        this.longitude = 72.90858878021125;
        
        this.isConnected = false;
        this.deferredPrompt = null;
        
        this.initializeElements();
        this.setupEventListeners();
        this.initializeTestData();
        this.initializePWA(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é PWA –¥–µ–ª–∞–µ–º –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
    }
    
    initializePWA() {
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Service Worker —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        setTimeout(() => {
            if ('serviceWorker' in navigator) {
                navigator.serviceWorker.register('./sw.js')
                    .then(registration => {
                        console.log('Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
                        this.log('PWA: Service Worker –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
                    })
                    .catch(error => {
                        console.log('–û—à–∏–±–∫–∞ Service Worker:', error);
                    });
            }
        }, 1000);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PWA
        window.addEventListener('beforeinstallprompt', (e) => {
            e.preventDefault();
            this.deferredPrompt = e;
            this.showInstallPrompt();
            this.log('PWA: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞');
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–∞–∫ PWA
        if (window.matchMedia('(display-mode: standalone)').matches) {
            this.log('PWA: –ó–∞–ø—É—â–µ–Ω–æ –∫–∞–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
        }
    }
    
    showInstallPrompt() {
        const installPrompt = document.getElementById('installPrompt');
        const installPwaBtn = document.getElementById('installPwaBtn');
        
        if (installPrompt) installPrompt.style.display = 'block';
        if (installPwaBtn) installPwaBtn.style.display = 'inline-block';
    }
    
    hideInstallPrompt() {
        const installPrompt = document.getElementById('installPrompt');
        if (installPrompt) installPrompt.style.display = 'none';
    }
    
    initializeElements() {
        this.connectBtn = document.getElementById('connectBtn');
        this.statusDiv = document.getElementById('status');
        this.coordinatesText = document.getElementById('coordinatesText');
        this.copyBtn = document.getElementById('copyBtn');
        this.openMapsBtn = document.getElementById('openMapsBtn');
        this.findBtn = document.getElementById('findBtn');
        this.testBtn = document.getElementById('testBtn');
        this.staticMap = document.getElementById('staticMap');
        this.dataLog = document.getElementById('dataLog');
    }
    
    setupEventListeners() {
        if (this.connectBtn) this.connectBtn.addEventListener('click', () => this.connectToDevice());
        if (this.copyBtn) this.copyBtn.addEventListener('click', () => this.copyCoordinates());
        if (this.openMapsBtn) this.openMapsBtn.addEventListener('click', () => this.openInMaps());
        if (this.findBtn) this.findBtn.addEventListener('click', () => this.sendFindCommand());
        if (this.testBtn) this.testBtn.addEventListener('click', () => this.simulateMayakData());
        
        // PWA –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        const installBtn = document.getElementById('installBtn');
        const dismissBtn = document.getElementById('dismissBtn');
        const installPwaBtn = document.getElementById('installPwaBtn');
        
        if (installBtn) installBtn.addEventListener('click', () => this.installPWA());
        if (dismissBtn) dismissBtn.addEventListener('click', () => this.hideInstallPrompt());
        if (installPwaBtn) installPwaBtn.addEventListener('click', () => this.installPWA());
    }
    
    async installPWA() {
        if (this.deferredPrompt) {
            try {
                this.deferredPrompt.prompt();
                const { outcome } = await this.deferredPrompt.userChoice;
                
                if (outcome === 'accepted') {
                    this.log('PWA: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                    this.hideInstallPrompt();
                } else {
                    this.log('PWA: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
                }
                this.deferredPrompt = null;
            } catch (error) {
                this.log('PWA: –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: ' + error);
            }
        } else {
            this.log('PWA: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞');
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä—É—á–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
            alert('–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:\n1. –í –º–µ–Ω—é –±—Ä–∞—É–∑–µ—Ä–∞ (—Ç—Ä–∏ —Ç–æ—á–∫–∏)\n2. –í—ã–±–µ—Ä–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω"\n3. –ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å"');
        }
    }
    
    initializeTestData() {
        this.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º.');
        this.updateCoordinates();
        this.updateMap();
        this.setButtonsState(true);
        this.updateStatus('–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º', 'connected');
    }
    
    simulateMayakData() {
        const testCoordinates = [
            { lat: 55.241867942983404, lon: 72.90858878021125, name: "–û—Å–Ω–æ–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è" },
            { lat: 55.2420, lon: 72.9090, name: "–°–º–µ—â–µ–Ω–∏–µ +10–º" },
            { lat: 55.2415, lon: 72.9080, name: "–°–º–µ—â–µ–Ω–∏–µ -10–º" },
            { lat: 55.2418, lon: 72.9085, name: "–¢–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ" }
        ];
        
        const randomCoord = testCoordinates[Math.floor(Math.random() * testCoordinates.length)];
        
        this.latitude = randomCoord.lat;
        this.longitude = randomCoord.lon;
        
        this.log(`[–¢–ï–°–¢] –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${randomCoord.name}`);
        this.log(`[–¢–ï–°–¢] GPS:${this.latitude},${this.longitude}`);
        
        this.updateCoordinates();
        this.updateMap();
    }
    
    async connectToDevice() {
        try {
            this.log('–ü–æ–∏—Å–∫ BLE —É—Å—Ç—Ä–æ–π—Å—Ç–≤...');
            
            if (!navigator.bluetooth) {
                this.log('–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Bluetooth');
                this.updateStatus('Bluetooth –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è', 'error');
                return;
            }
            
            const UART_SERVICE_UUID = '6e400001-b5a3-f393-e0a9-e50e24dcca9e';
            
            this.device = await navigator.bluetooth.requestDevice({
                filters: [{ services: [UART_SERVICE_UUID] }],
                optionalServices: [UART_SERVICE_UUID]
            });
            
            this.log(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${this.device.name}...`);
            this.updateStatus('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...', 'connecting');
            
            this.device.addEventListener('gattserverdisconnected', () => {
                this.onDisconnected();
            });
            
            const server = await this.device.gatt.connect();
            this.server = server;
            
            const service = await server.getPrimaryService(UART_SERVICE_UUID);
            const txCharacteristic = await service.getCharacteristic('6e400003-b5a3-f393-e0a9-e50e24dcca9e');
            this.rxCharacteristic = await service.getCharacteristic('6e400002-b5a3-f393-e0a9-e50e24dcca9e');
            
            await txCharacteristic.startNotifications();
            txCharacteristic.addEventListener('characteristicvaluechanged', 
                (event) => this.handleDataReceived(event));
            
            this.isConnected = true;
            this.log('–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ!');
            this.updateStatus('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –º–∞—è–∫—É', 'connected');
            this.setButtonsState(true);
            
        } catch (error) {
            this.log('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ' + error);
            this.updateStatus('Bluetooth –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'error');
        }
    }
    
    handleDataReceived(event) {
        try {
            const value = event.target.value;
            const decoder = new TextDecoder();
            const data = decoder.decode(value);
            
            this.log(`–î–∞–Ω–Ω—ã–µ —Å –º–∞—è–∫–∞: ${data}`);
            
            if (data.startsWith('GPS:')) {
                const coords = data.replace('GPS:', '').split(',');
                if (coords.length === 2) {
                    this.latitude = parseFloat(coords[0]);
                    this.longitude = parseFloat(coords[1]);
                    this.updateCoordinates();
                }
            }
        } catch (error) {
            this.log('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error);
        }
    }
    
    updateCoordinates() {
        if (this.coordinatesText) {
            const coordsText = `–®–∏—Ä–æ—Ç–∞: ${this.latitude.toFixed(6)}, –î–æ–ª–≥–æ—Ç–∞: ${this.longitude.toFixed(6)}`;
            this.coordinatesText.textContent = coordsText;
            this.updateMap();
        }
    }
    
    updateMap() {
        if (!this.latitude || !this.longitude || !this.staticMap) return;
        
        this.staticMap.innerHTML = `
            <div class="map-content">
                <div style="font-size: 36px; margin-bottom: 10px;">üìç</div>
                <div style="font-weight: bold; margin-bottom: 15px;">–ü–æ–ª–æ–∂–µ–Ω–∏–µ –º–∞—è–∫–∞</div>
                
                <div class="coordinates-display">
                    <div>–®–∏—Ä–æ—Ç–∞: <strong>${this.latitude.toFixed(6)}</strong></div>
                    <div>–î–æ–ª–≥–æ—Ç–∞: <strong>${this.longitude.toFixed(6)}</strong></div>
                </div>
                
                <button onclick="window.open('https://yandex.ru/maps/?pt=${this.longitude},${this.latitude}&z=17', '_blank')" 
                        class="btn secondary" 
                        style="margin-top: 15px; padding: 8px 15px;">
                    üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É
                </button>
            </div>
        `;
    }
    
    async sendFindCommand() {
        if (!this.isConnected) {
            this.log('[–¢–ï–°–¢] –ö–æ–º–∞–Ω–¥–∞ FIND –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
            alert('[–¢–ï–°–¢] –°–≤–µ—Ç –∏ –∑–≤—É–∫ –≤–∫–ª—é—á–µ–Ω—ã!');
            return;
        }
        
        if (!this.rxCharacteristic) {
            this.log('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
            return;
        }
        
        try {
            const encoder = new TextEncoder();
            const data = encoder.encode('FIND');
            await this.rxCharacteristic.writeValue(data);
            this.log('–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
        } catch (error) {
            this.log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ' + error);
        }
    }
    
    async copyCoordinates() {
        if (this.latitude && this.longitude) {
            const coords = `${this.latitude},${this.longitude}`;
            try {
                await navigator.clipboard.writeText(coords);
                this.log('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã');
                
                if (this.copyBtn) {
                    const originalText = this.copyBtn.textContent;
                    this.copyBtn.textContent = '‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
                    setTimeout(() => {
                        if (this.copyBtn) this.copyBtn.textContent = originalText;
                    }, 2000);
                }
            } catch (error) {
                // Fallback
                const textArea = document.createElement('textarea');
                textArea.value = coords;
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
                this.log('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã');
            }
        }
    }
    
    openInMaps() {
        if (this.latitude && this.longitude) {
            const url = `https://yandex.ru/maps/?pt=${this.longitude},${this.latitude}&z=17`;
            window.open(url, '_blank');
            this.log('–ö–∞—Ä—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∞');
        }
    }
    
    onDisconnected() {
        this.log('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ');
        this.updateStatus('–û—Ç–∫–ª—é—á–µ–Ω–æ', 'disconnected');
        this.setButtonsState(false);
        this.isConnected = false;
    }
    
    updateStatus(message, type) {
        if (this.statusDiv) {
            this.statusDiv.textContent = message;
            this.statusDiv.className = `status ${type}`;
        }
    }
    
    setButtonsState(enabled) {
        if (this.copyBtn) this.copyBtn.disabled = !enabled;
        if (this.openMapsBtn) this.openMapsBtn.disabled = !enabled;
        if (this.findBtn) this.findBtn.disabled = !enabled;
    }
    
    log(message) {
        if (!this.dataLog) return;
        
        const timestamp = new Date().toLocaleTimeString();
        const logEntry = document.createElement('div');
        logEntry.textContent = `[${timestamp}] ${message}`;
        this.dataLog.appendChild(logEntry);
        this.dataLog.scrollTop = this.dataLog.scrollHeight;
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        new MayakFinder();
    });
} else {
    new MayakFinder();
}
